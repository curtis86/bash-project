#!/usr/bin/env bash
#
# bash-project: generate BASH projects from a template.
# Author: Curtis K
# Github: https://github.com/curtis86

# BASH MODES
set -u
set -o pipefail

# SCRIPT FUNCTIONS
abrt() { echo "ERROR: $@ -- exiting." 1>&2 ; exit 1 ;}
usage() { echo -e "\nUsage: $( basename $0 ) <project_name> <project_version> <project_parent_directory>" ;}
test_access() { test_target="$1" ; [ ! -w "${test_target}" ] && abrt "Unable to access ${test_target}" ;}

readonly REQ_ARGS=3 ; [ $# -ne ${REQ_ARGS} ] && usage && exit 1
readonly home_dir="$( cd "$( dirname $0 )" ; pwd )"
readonly template_functions_file="${home_dir}/bash-project.sh.txt" ; test_access "${template_functions_file}"
readonly project_template_file="${home_dir}/project-template.sh.txt" ; test_access "${project_template_file}"
readonly project_template_vars_file="${home_dir}/project-vars.sh.txt" ; test_access "${project_template_vars_file}"
readonly project_template_functions_file="${home_dir}/project-functions.sh.txt" ; test_access "${project_template_functions_file}"
readonly bad_chars_grep_string='\!|\@|\#|\$|\%|\^|\ |\&|\*|\(|\)|\{|\}|\\|\/'

project_name="$1"
project_version="$2"
project_parent_directory="$3"

main(){
  echo
  echo -n "Are you sure you want to create project ${project_name} ${project_version} in ${project_parent_directory} (${project_parent_directory}/${project_name}/) ? <y/n> "
  read create_confirmation < /dev/tty
  create_confirmation="$( echo "${create_confirmation}" | tr '[A-Z]' '[a-z]' )"
  if [ "${create_confirmation}" != "y" ]; then
    echo "Exiting at user request."
    exit 0
  fi

  # basic test for chars we do not want
  test_bad_chars="$( echo "${project_name}" | grep -E "${bad_chars_grep_string}" )"
  [ -n "${test_bad_chars}" ] && abrt "Please do not use special characters in the project name"

  test_access "${project_parent_directory}"
  project_directory="${project_parent_directory}/${project_name}"
  project_includes_directory="${project_directory}/includes"
  [ -d "${project_directory}" ] && abrt "Project directory ${project_directory} already exists"

  echo
  echo "Creating project... "
  mkdir "${project_directory}" || abrt "unable to create directory ${project_directory}"
  mkdir "${project_includes_directory}"
  project_file="${project_directory}/${project_name}"
  project_vars_file="${project_includes_directory}/${project_name}-vars.sh"
  project_functions_file="${project_includes_directory}/${project_name}-functions.sh"
  functions_file="${project_includes_directory}/bash-project.sh"
  cp "${project_template_file}" "${project_file}"
  cp "${project_template_vars_file}" "${project_vars_file}"
  cp "${project_template_functions_file}" "${project_functions_file}"
  cp "${template_functions_file}" "${functions_file}"
  chmod +x "${project_file}"
   
  sed -i "s/PROJECT_NAME/${project_name}/g" "${project_file}" 2>/dev/null || sed -i '' "s/PROJECT_NAME/${project_name}/g" "${project_file}"
  sed -i "s/PROJECT_VERSION/${project_version}/g" "${project_file}" 2>/dev/null || sed -i '' "s/PROJECT_VERSION/${project_version}/g" "${project_file}"
  sed -i "s/PROJECT_NAME/${project_name}/g" "${project_vars_file}" 2>/dev/null || sed -i '' "s/PROJECT_NAME/${project_name}/g" "${project_vars_file}"
  sed -i "s/PROJECT_VERSION/${project_version}/g" "${project_vars_file}" 2>/dev/null || sed -i '' "s/PROJECT_VERSION/${project_version}/g" "${project_vars_file}"
  echo
  echo "Completed. Project created in ${project_directory}."

}
main $@
