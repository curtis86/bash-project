## Generated by bash-project (https://github.com/curtis86/bash-project)

## TRAPS
trap bp::force_exit INT KILL
bp::force_exit() { bp::msg "${t_bold}${t_yellow}WARNING:${t_normal}: trap caught. Exiting." ; exit ;}

## FORMATTING
t_bold=$( tput bold )
t_red=$( tput setaf 1 )
t_yellow=$( tput setaf 3 )
t_green=$( tput setaf 2 )
t_normal=$( tput sgr0 )

## SCRIPT FUNCTIONS

# abrt: prints abort message and exits script
# arg1: message
bp::abrt() { echo -e "${t_bold}${t_red}FATAL:${t_normal} $@ - exiting." 1>&2 ; exit 1 ;}

# test_access: test if a file or directory is writeable - exit if not.
# arg1: file or directory to test write access
bp::test_access() { test_target="$1" ; [ ! -w "${test_target}" ] && bp::abrt "Unable to access ${t_yellow}${test_target}${t_normal}" ;}

# msg: prints a message to stdout
# arg1: message
bp::msg() { echo "$@" ;}

# vmsg: prints a message to stderr
# arg1: message
bp::vmsg() { echo "$@" >&2 ;}

# lmsg: logs message to file (please define ${LOG_FILE})
# arg1: message
bp::lmsg() { 
  [ -z "${LOG_FILE}" ] && bp::abrt "The LOG_FILE variable is not set"
  bp::test_access "${LOG_FILE}"

  echo "$( date ) - $@" >> "${LOG_FILE}"
}

# Presents a yes/no prompt, returns 0 for yes, or 1 for anything else
# arg1: question string
bp::yesno() {
  echo -n "$@ <y/n> "
  read ynanswer < /dev/tty
  ynanswer="$( echo "${ynanswer}" | head -c 1 | tr '[A-Z]' '[a-z]' )"
  [ "${ynanswer}" == "y" ] && return 0 || return 1 
}

# Converts a string to uppercase
# arg1: a string
bp::to_upper() {
  local converted_to_upper="$( echo "$@" | tr '[a-z]' '[A-Z]' )"
  [ -z "${converted_to_upper}" ] && return 1
  [ -n "${converted_to_upper}" ] && echo "${converted_to_upper}"  
}

# Converts a string to lowercase
# arg1: a string
bp::to_lower() {
  local converted_to_lower="$( echo "$@" | tr '[A-Z]' '[a-z]]' )"
  [ -z "${converted_to_lower}" ] && return 1
  [ -n "${converted_to_lower}" ] && echo "${converted_to_lower}"  
}

# Checks dependencies are met
# arg1: none. iterates over the script_depdendencies array declared in vars.
bp::check_dependencies() {
  
  for dependency in "${SCRIPT_DEPENDENCIES[@]}" ; do
    if ! which "${dependency}" >/dev/null 2>&1 ; then
      bp::abrt "Dependency ${dependency} not found"
    fi
  done
}
